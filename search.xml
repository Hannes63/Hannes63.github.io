<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>统计学习方法代码复现 | 第3章：k近邻法</title>
      <link href="/2021/12/20/knn(211221)/"/>
      <url>/2021/12/20/knn(211221)/</url>
      
        <content type="html"><![CDATA[<h1 id="k近邻法概述"><a href="#k近邻法概述" class="headerlink" title="k近邻法概述"></a>k近邻法概述</h1><p>k近邻（KNN，k-nearest-neighbors）算法是一个直观简单的分类与回归方法：给定一个训练数据集<br>$$T={(x_1, y_1), (x_2, y_2), \cdots, (x_N, y_N)},$$<br>其中$x_i\in \mathbb{R}^n$为实例的特征向量，$y\in{c_1,c_2,\cdots,c_K}$为实例的类别，$N$为实例数目，$K$为类别数目，$n$为特征向量维度；对新的输入实例$x$，该算法预测输出$x$所属的类$y$。</p><p>k近邻模型由三个基本要素决定：<strong>距离度量</strong>，<strong>k值的选择</strong>以及<strong>分类决策规则</strong>。</p><ol><li><p><strong>距离度量</strong>：两个实例点$x_i$和$x_j$间的距离。通常使用欧氏距离：<br>$$L_2(x_i,x_j)=\sqrt{\sum_{k=1}^{n}(x_i^{(k)}-x_j^{(k)})^2}$$<br>其它类型的距离详见课本。</p></li><li><p><strong>k值的选择</strong>：根据所给的距离度量，在训练集$T$中找出与输入$x$最邻近的$k$个点，其点集记为$N_k$。</p></li><li><p><strong>分类决策规则</strong>：通常采用投票表决的方式决定输出类别：以$N_k$中拥有最多点的类别作为对$x$的预测。</p><ul><li><p>均匀权重：相当于每个点的权重都为1，$N_k$距离$x$远和近的点对预测无影响。<br>$$W_t=\sum_{x_i\in N_k, y_i\in c_t} 1$$</p></li><li><p>距离加权：对$N_k$中每个点赋予一定权重，如距离的反比：<br>$$W_t=\sum_{x_i\in N_k, y_i\in c_t} \frac{1}{L_2(x,x_i)}$$</p></li></ul></li></ol><p>基本上KNN模型主要能调的就是以上三个参数了。</p><h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p>这里简单介绍实现KNN的三种算法。</p><h2 id="最简单的方法：线性扫描"><a href="#最简单的方法：线性扫描" class="headerlink" title="最简单的方法：线性扫描"></a>最简单的方法：线性扫描</h2><p>对于每一个输入实例$x$，计算其与$N$个训练实例间的距离，然后进行快速排序，找到前$k$个最小距离点。这种算法的时间复杂度为$\Theta(N\log N)$，当训练集很大时，计算非常耗时。</p><h2 id="更高效的方法：kd树"><a href="#更高效的方法：kd树" class="headerlink" title="更高效的方法：kd树"></a>更高效的方法：kd树</h2><p>即书里3.3节介绍的方法，训练阶段构造一颗平衡kd树，具体算法见书里算法3.3；预测阶段则利用构造好的kd树进行k近邻搜索，由于书中的算法3.3是kd树的<em><strong>最</strong></em>近邻搜索算法，这里叙述一下<em><strong>k</strong></em>近邻搜索算法：</p><h3 id="算法3-4（用kd树的k近邻搜索）"><a href="#算法3-4（用kd树的k近邻搜索）" class="headerlink" title="算法3.4（用kd树的k近邻搜索）"></a><strong>算法3.4（用kd树的k近邻搜索）</strong></h3><p>输入：已构造的kd树，目标点$x$，k近邻中的$k$；<br>输出：$x$的k近邻。</p><p>（1）同算法3.3<br>（2）同算法3.3<br>（3）初始化一个最大优先队列<code>pq</code>，用于存储当前发现$k$个距离最小的点。递归地向上回退，在每个结点进行以下操作：<br>&emsp;若<code>pq.size&lt;k</code>，则将该点加入优先队列（<code>pq.size</code>为优先队列中元素数量），同时对该结点的另外一个子树进行向下的递归搜索（对应复现代码中<code>traversal</code>函数）；<br>&emsp;&emsp;&emsp; 若<code>pq.size&gt;=k</code>，则将$x$到当前结点对应kd树二分超平面的距离$s$与<code>pq.top()</code>（优先队列的头部，即最大值）进行比较，若小于，则表明另一个子节点对应的取余存在距目标点更近的点，于是将最大值从优先队列中取出来，并插入$s$，并对该结点的另外一个子树进行向下的递归搜索；反之则向上回退。<br>（4）当回退到根节点的父节点（为<code>None</code>）时，返回当前优先队列中的$k$个点，即为距离目标点$x$最近的$k$个点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>本篇<a href="https://github.com/Hannes63/Statistical-Learning-Method/blob/main/KNN/KNN.py">KNN算法代码复现</a>采用的便是借助kd树的算法：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> utils.statistics <span class="keyword">import</span> median</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> heap</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KDTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, X, y, dim</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Information of a kd-tree node, and kd-tree operation functions.</span></span><br><span class="line"><span class="string">        Compared with brute-force method (sorting method), kd-tree could decrease the time of one prediction</span></span><br><span class="line"><span class="string">        from O(n log n) to O(log k * log n), where Θ(log n) is the height of the kd-tree, and O(log k) is the</span></span><br><span class="line"><span class="string">        operation time of priority queue.</span></span><br><span class="line"><span class="string">        :param X: ndarray of shape (n_samples, n_features).</span></span><br><span class="line"><span class="string">        :param y: ndarray of shape (n_samples, ), category of X</span></span><br><span class="line"><span class="string">        :param dim: the compared dimension of this node.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.parent = <span class="literal">None</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.X = X</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct_kd_tree</span>(<span class="params">cls, X, y, axis=<span class="number">0</span>, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Construct an kd-tree recursively with input data.</span></span><br><span class="line"><span class="string">        :param X: ndarray of shape (n_samples, n_features).</span></span><br><span class="line"><span class="string">        :param y: ndarray of shape (n_samples,).</span></span><br><span class="line"><span class="string">        :param axis: the current axis that is to calculate the median.</span></span><br><span class="line"><span class="string">        :param parent: the parent node of this call.</span></span><br><span class="line"><span class="string">        :return: the root of constructed tree/subtree.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> X.size &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        num, dim = X.shape</span><br><span class="line">        mid = median(X, axis=axis, mod=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">        mid_value = X[mid][axis]</span><br><span class="line">        node = KDTree(X[mid], y[mid], axis)</span><br><span class="line">        node.parent = parent</span><br><span class="line"></span><br><span class="line">        lX, ly, rX, ry = [], [], [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            <span class="keyword">if</span> X[i][axis] &lt;= mid_value <span class="keyword">and</span> i != mid:  <span class="comment"># left subtree</span></span><br><span class="line">                lX.append(X[i])</span><br><span class="line">                ly.append(y[i])</span><br><span class="line">            <span class="keyword">elif</span> X[i][axis] &gt; mid_value:  <span class="comment"># right subtree</span></span><br><span class="line">                rX.append(X[i])</span><br><span class="line">                ry.append(y[i])</span><br><span class="line">        lX, ly, rX, ry = np.array(lX), np.array(ly), np.array(rX), np.array(ry)</span><br><span class="line"></span><br><span class="line">        node.left = cls.construct_kd_tree(lX, ly, (axis + <span class="number">1</span>) % dim, node)</span><br><span class="line">        node.right = cls.construct_kd_tree(rX, ry, (axis + <span class="number">1</span>) % dim, node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">k_nearest_neighbors</span>(<span class="params">cls, node, X0, k, L_const=<span class="number">2</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Find k nearest neighbors of input value in a kd-tree.</span></span><br><span class="line"><span class="string">        :param L_const: the constant of Lp distance, for example, when L_const=2, the algorithm uses</span></span><br><span class="line"><span class="string">        Euclidean distance.</span></span><br><span class="line"><span class="string">        :param k: The number of nearest neighbors.</span></span><br><span class="line"><span class="string">        :param node: root node of kd-tree.</span></span><br><span class="line"><span class="string">        :param X0: array-like of shape (n_features, ), the input data point.</span></span><br><span class="line"><span class="string">        :return: a list of k values whose L2-distances are the nearest.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> k &gt; <span class="number">0</span></span><br><span class="line">        axis = <span class="number">0</span></span><br><span class="line">        dim = <span class="built_in">len</span>(X0)</span><br><span class="line">        son = node</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Find the leaf node in kd-tree that is the nearest to input value</span></span><br><span class="line">        <span class="keyword">while</span> son <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            node = son</span><br><span class="line">            <span class="keyword">if</span> X0[axis] &lt;= node.X[axis]:</span><br><span class="line">                son = node.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                son = node.right</span><br><span class="line">            axis = (axis + <span class="number">1</span>) % dim</span><br><span class="line">        pq = heap.PriorityQueue(<span class="string">&#x27;max&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Used for priority queue, Tup(a1, b1) &lt; Tup(a2, b2) iff a1 &lt; a2</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Tup</span>:</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, d, kdnode: KDTree</span>):</span></span><br><span class="line">                self.d = d</span><br><span class="line">                self.node = kdnode</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">                <span class="keyword">return</span> self.d == other.d</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">                <span class="keyword">return</span> self.d &lt; other.d</span><br><span class="line"></span><br><span class="line">        <span class="comment"># L2 distance without root between input and the node nd</span></span><br><span class="line">        L2 = <span class="keyword">lambda</span> nd: np.<span class="built_in">sum</span>((nd.X - X0) ** L_const)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span>(<span class="params">node</span>):</span></span><br><span class="line">            <span class="comment"># traverse the tree downward</span></span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">nonlocal</span> pq, X0</span><br><span class="line">            <span class="keyword">if</span> pq.size &lt; k:</span><br><span class="line">                dis = L2(node)</span><br><span class="line">                pq.insert(Tup(dis, node))</span><br><span class="line">                traversal(node.left)</span><br><span class="line">                traversal(node.right)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">abs</span>(node.X[node.dim] - X0[node.dim])**L_const &gt; pq.top().d:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dis = L2(node)</span><br><span class="line">                <span class="keyword">if</span> dis &lt; pq.top().d:</span><br><span class="line">                    pq.extract_top()</span><br><span class="line">                    pq.insert(Tup(dis, node))</span><br><span class="line">                traversal(node.left)</span><br><span class="line">                traversal(node.right)</span><br><span class="line"></span><br><span class="line">        pq.insert(Tup(L2(node), node))</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># traverse the tree upward, if condition satisfied, then downward by calling traversal(node)</span></span><br><span class="line">            son = node</span><br><span class="line">            node = node.parent</span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">and</span> (pq.size &lt; k <span class="keyword">or</span> <span class="built_in">abs</span>(node.X[node.dim] - X0[node.dim])**L_const &lt;= pq.top().d):</span><br><span class="line">                dis = L2(node)</span><br><span class="line">                <span class="keyword">if</span> pq.size &lt; k:</span><br><span class="line">                    pq.insert(Tup(dis, node))</span><br><span class="line">                <span class="keyword">elif</span> dis &lt; pq.top().d:</span><br><span class="line">                    pq.extract_top()</span><br><span class="line">                    pq.insert(Tup(dis, node))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> son == node.left:</span><br><span class="line">                    traversal(node.right)</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># son == node.right</span></span><br><span class="line">                    traversal(node.left)</span><br><span class="line">        k_list = [i.node <span class="keyword">for</span> i <span class="keyword">in</span> pq.data]</span><br><span class="line">        <span class="keyword">return</span> k_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KNN</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, k_neighbors=<span class="number">1</span>, L_const=<span class="number">2</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Predict a sample by referring the k nearest neighbors, and making decision by majority.</span></span><br><span class="line"><span class="string">        :param k_neighbors: the number of nearest neighbors</span></span><br><span class="line"><span class="string">        :param L_const: the constant of Lp distance, for example, when L_const=2, the algorithm uses</span></span><br><span class="line"><span class="string">        Euclidean distance.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.k_neighbors = k_neighbors</span><br><span class="line">        self.kd_root = <span class="literal">None</span></span><br><span class="line">        self.L_const = L_const</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Construct the kd-tree using the input X.</span></span><br><span class="line"><span class="string">        :param X: array-like of shape (n_samples, n_features)</span></span><br><span class="line"><span class="string">        :param y: array-like of shape (n_samples, ), the tags of corresponding sample in X</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        X = np.array(X)</span><br><span class="line">        y = np.array(y)</span><br><span class="line">        self.kd_root = KDTree.construct_kd_tree(X, y)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X0</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Predict the category of input.</span></span><br><span class="line"><span class="string">        :param X0: array-like of shape (n_features, )</span></span><br><span class="line"><span class="string">        :return: the category of the input X0</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        k_list = KDTree.k_nearest_neighbors(self.kd_root, X0, self.k_neighbors, self.L_const)</span><br><span class="line">        vote = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> k_list:</span><br><span class="line">            <span class="keyword">if</span> i.y <span class="keyword">not</span> <span class="keyword">in</span> vote:</span><br><span class="line">                vote[i.y] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                vote[i.y] += <span class="number">1</span></span><br><span class="line">        largest = <span class="number">0</span></span><br><span class="line">        pred_cat = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> category, count <span class="keyword">in</span> vote.items():</span><br><span class="line">            <span class="keyword">if</span> count &gt; largest:</span><br><span class="line">                largest = count</span><br><span class="line">                pred_cat = category</span><br><span class="line">        <span class="keyword">return</span> pred_cat</span><br></pre></td></tr></table></figure><p>代码调用了自己写的类<a href="https://github.com/Hannes63/Statistical-Learning-Method/blob/main/utils/heap.py"><code>priority_queue</code></a>和函数<a href="https://github.com/Hannes63/Statistical-Learning-Method/blob/main/utils/statistics.py"><code>median</code></a>。其中使用最大优先队列除了像笔者这样自定义<code>priority_queue</code>类外还可以调用标准库模块的<code>heapq</code>；而求中位数由于<code>numpy.median</code>不能返回中位数的下标，并且对于偶数个元素数组求中位数不能指定中间两个数较大一个数或较小一个数，因此还需要自己写求中位数算法。这里选用的是快速选择算法，对于$n$个元素的数组能在平均情况下$\Theta(n)$时间内完成。</p><p>本模型可以通过如下方式进行训练和预测：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model = KNN.KNN(k_neighbors=<span class="number">25</span>, L_const=<span class="number">2</span>)</span><br><span class="line">model.fit(X, y)  <span class="comment"># training</span></span><br><span class="line">y0 = model.predict(X0)  <span class="comment"># prediction</span></span><br></pre></td></tr></table></figure><p>测试代码详见<a href="https://github.com/Hannes63/Statistical-Learning-Method/blob/main/KNN/test.py"><code>./KNN/test.py</code></a>。<br><img src="/images/post/KNN/1.png" alt="测试图"></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>kd树构造使用了分治法，在数据分布均匀的情况下每次递归调用会均等分为2种子情况，而每次递归调用median函数使用的快速排序其平均情况下时间复杂度为$\Theta(n)$（最坏情况下为$O(n^2)$，可以采用<a href="https://blog.csdn.net/a3192048/article/details/82055183">bfptr算法</a>避免最坏情况的发生。因而递推式为$T(n)=2T(n/2)+O(n)$，由主定理推得$T(n)=O(n\log n)$。这里有个小坑，当数据分布不够均匀时，中位数函数无法找到等分点的位置，例如数据<code>(0,0,0,0,0,0,0,1,3)</code>，中位数为0，但划分的两个子集大小为$|{x|x\leq 0}|=6$与$|{x|x&gt;0}|=2$，当0更多时这样的划分就接近最坏情况了，导致构建的kd树几近退化为线性链表，因而递归式会变为$T(n)=T(n-1)+T(0)+O(n)$，即$O(n^2)$。</p><p>kd树的搜索的时间复杂度推导比较复杂，这里直接给出<a href="https://en.wikipedia.org/wiki/K-d_tree#:~:text=Querying%20an%20axis%2Dparallel%20range,of%20the%20k%2Dd%20tree.">结论</a>，$O(n^{\frac{k-1}{k}}+m)$，其中$m$为k近邻点的个数，$k$为特征向量的维度。可见当$k&gt;10$时，kd树的搜索就已经近乎于线性搜索了。这里笔者最开始使用了网上一个数据集，使用了不同大小数据集去跑，结果测试下来发现时间是线性相关的便十分迷惑，书上不是写的$O(\log n)$吗？！即使是k近邻复杂度也最多多个系数变为$O(\log k\log n)$呀。结果知道这个公式后才知道效率下降得如此之快，而不是书上所说的“当空间维数接近训练实例数时，它的效率会迅速下降”。</p><h2 id="应对高维数据的方法：球树模型"><a href="#应对高维数据的方法：球树模型" class="headerlink" title="应对高维数据的方法：球树模型"></a>应对高维数据的方法：球树模型</h2><p>为了应对kd树在高维情况下效率下降得问题，有人引入了球树（ball tree）这一数据结构。kd树相当于将特征空间划分为若干个超矩形空间，而球树包含若干个超球体分别囊括部分样本点。</p><p><img src="/images/post/KNN/2.jpg" alt="图2"></p><p>这部分感兴趣的同学可以去看看<a href="https://www.cnblogs.com/zhengxingpeng/p/6670451.html">这篇博客</a>的对球树的介绍，其思想与kd树是类似的，咱就点到为止。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
